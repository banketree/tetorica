import 'package:tetorica/cipher/bigint.dart';
import 'package:tetorica/cipher/rsa.dart';
import 'package:test/test.dart' as test;

main() {
  test.group("rsa", () {
    /*
    test.test("exp1", () {
      int bufferSize = 3*620;
      BigInt m1 = new BigInt.fromInt(0x2b0, bufferSize);
      BigInt e = new BigInt.fromInt(0x4f, bufferSize);
      test.expect("${m1.exponentiat(e)}",
      "0xb472507a8d727bcb930ddfe957a22fce4840d4c5a0ee6b23aef0187899e06067ca39c64d0e9dfc4723a57b40b8d0e54bc3c5449c30000000000000000000000000000000000000000000000000000000000000000000000000000000");
    });
*/
/*
test.test("exp2", () {
  int bufferSize = 2*620;
  BigInt e = new BigInt.fromInt(0x10000000000000000, bufferSize);
  print("##=>:${e*e}");
  //test.expect("${m1.exponentiat(e)}",
  //"0xb472507a8d727bcb930ddfe957a22fce4840d4c5a0ee6b23aef0187899e06067ca39c64d0e9dfc4723a57b40b8d0e54bc3c5449c30000000000000000000000000000000000000000000000000000000000000000000000000000000");
});*/

    test.test("exp2", () {
      int bufferSize = 20*620;
      BigInt m1 = new BigInt.fromInt(2, bufferSize);
      BigInt e = new BigInt.fromInt(0x1ff, bufferSize);
//      m1.exponentiat(e);
//       print("##=>:${m1.exponentiat(e)}");
      //print("##=>:${RSA.exp(m1,e)}");
      test.expect("${m1.exponentiate(e)}", "${RSA.exp(m1,e)}");
      //test.expect("${m1.exponentiat(e)}",
      //"0xb472507a8d727bcb930ddfe957a22fce4840d4c5a0ee6b23aef0187899e06067ca39c64d0e9dfc4723a57b40b8d0e54bc3c5449c30000000000000000000000000000000000000000000000000000000000000000000000000000000");
    });

    /*
    test.test("compute 001", () {
      {
        //
        // n = pq
        // c = m**e % n
        // m = c**d % n
        // sigma = (p-1)(q-1)
        // e := (ex 2**16+1)
        // ed % sigma = 1
        int bufferSize = 3*620;
        BigInt e = new BigInt.fromInt(0x4f, bufferSize);
        BigInt d = new BigInt.fromInt(0x3fb, bufferSize);
        BigInt n = new BigInt.fromInt(0xd09, bufferSize);
        BigInt m1 = new BigInt.fromInt(0x2b0, bufferSize);

        // encrypt
        BigInt c = RSA.compute(m1, e, n);
        test.expect("${c}","${new BigInt.fromInt(1570,bufferSize)}");

        // decrypt
        BigInt m2 = RSA.compute(c, d, n);
        test.expect("${m2}","${new BigInt.fromInt(688,bufferSize)}");
      }

    });
    */
/*
    test.test("compute 002", () {
      {
        // p = 3
        // q = 5
        // n = 15
        // sigma = 8
        // e = 13 : 1<e<n
        // ed = 3 % sigma
        // c = m**e % n
        // m = c**d % n
        int bufferSize = 20;
        BigInt e = new BigInt.fromInt(11, bufferSize);
        BigInt d = new BigInt.fromInt(3, bufferSize);
        BigInt n = new BigInt.fromInt(15, bufferSize);
        BigInt m1 = new BigInt.fromInt(9, bufferSize);

        // 33 8
        // encrypt
        BigInt c = RSA.compute(m1, e, n);
      //  int cc = RSA.computeA(0x2, 11, 15);
      //  test.expect("${c}","${new BigInt.fromInt(1570,bufferSize)}");

        // decrypt
        BigInt m2 = RSA.compute(c, d, n);
      //  int mm2 = RSA.computeA(cc, 3, 15);
      //  print("${m2} A=${mm2} ");
        test.expect("${m2}","${m1}");
      }
    });
*/
  });
}
/*
"0xb472507a8d727bcb930ddfe957a22fce4840d4c5a0ee6b23aef0187899e06067ca39c64d0e9dfc4723a57b40b8d0e54bc3c5449c30000000000000000000000000000000000000000000000000000000000000000000000000000000"
"0xcd0091bc7bee60ce8f9adbf506b12f803385a5ecf06459855457b80f6e81bb4f51eef7cfe561a2cacb62c9bb4c3f83606b9eb7c56385185a24e58fd4385457af385d36336285842423433c8eae0ae34ff05b21b6d09184fbe0ca6e7b1389c9c744525af72c7f647cb5706841499b4023339e17293f83e48ee552972f2f6d0968ebd383affe91149a6ee48932872a1ede270655693409c6ed7db7eabe7ad275f7312ebcb4f4ce35f6681e984199f91f6b13a6a1ec87da0565f82f2ea4ad460d2c79b64eb696775f9def25591e852cf9b29fb6a50e5458a075e96ea1887aee3a6fbe47e4b7a86ef312db1a24c097e495677735ead997931a6cb56eac8077c1ac6a8266c148451d61941fc0c91abcb46923b0accd5bc7a90eaaa2c543d244a12748a905c24a4166a707cc52bfe43989eaf45e477d55e999ba442f305915e4eff2f963a7a3357e70ef175cccfdb760496d516baa8168c1b31b52541364b6889ab5cc0f1ba9012ffb69afc17e143e0ebc5a4583d84ec90f75ca657b2f33d15144f776bb955d695899d59142e0895ee1ee2da920bdff545f213c0e8cc2dcd344c89f8eeb6029f0d010b9654c9aa435c52a60069c7587ac74db3dd95aff6e03b14ec434018b01dead352a884974af01ca7334a3794d498062b7d62b029804eda827df8fb8830e9f1d9d0f9b5c115000d87831addaa97b9635e0103ac209533accc6c9dc07fca783900413addb76968c72ab4de43618c976aca441344ef51f2434a35cc0b1b4a4cf0524913f3b58924ec4eea966045cd6b5e2ff0469910ce9596f9d9b46bc32b469b664d32031f88fa4c136a340de257f16f2d3881264b2904abaa105a3c11e462b6fefeff1eeb2dda0e09d5a8f6e4fd267345d44e54b44abc2c90a1c7d249b69b8515e30fddf9ed80f3b0f8715ad8c763016fcf3b43ed24c6ff2a589e5f65771387cc35b3de09b1413feda054dc71470caf9ad64306f4ce35840458aa460c6d4de0372fca2d044edeff942814804dc70ec4c29c66e2f266d0c1b8026f894f5ab13a77d9b8a026a08e53e611b0aa4ea1054bd4ba50a4c648841fddc28fdec08ef756cc5e7c5b62e4278143453fe23a22f5c12b107ac81fbee074511556f13055582737789084b19b9dd6e8ae8670c7c871f3e27f26ca2c2a08083e206f18dc1efcd6d09437fd4284b6e6ec49dfd1125bf166a5f728a69265566b6dcaea949db7a4ab0e8314d75de0730e2879e27bf4473cf635d1bbdcf329d21c5c981f38897bd55a155c37672ceaeef7add9a8302e085830a1192b616f68d408688650ce4fe62597701b7263bd309a07d3723ea9e49cf3cd56e59f757e7b2ce854895473e5eea900aee15169a49f4138fb8f9477e6f112c005c7ebe1b2203f8cc66a4862192c0bfcd7222d8a694b0a1ce571d29498317e3d496fe1f14f40be00ece2df06ab494eb918cf0bc8e437eb16f0bcb6960f92c4a7a650c89faf11ae68430a3d5772546c586946335d240c151b0e1f9a979b2e6546c5a56180e74492b146dd62a59fdf683ac3fa3f4fb5bb21166ab5b1add9e5de32186555b742a5db610703d198ca3132ae0074fe353fe8f05d5ba7987635f5f20376c0ea132f208a2ac8567427e5375c5b743d3d5ab58589c0a439a9b9b1a99340fd0f10c70630bc7a68bf03c0446ab2e04916fdd80b30df84c68872995954079eac22c128b6d131022877ee7bc954dd1583fdd7d8800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
 */
